---
interface Props {
  title?: string;
  content?: string;
  actionUrl?: string;
  actionText?: string;
  closeText?: string;
  closeUrl?: string; // 新增关闭按钮链接
  autoShowInterval?: number; // 自动显示间隔，单位秒
  isOpen?: boolean;
}

const {
  title = "公告",
  content = "这是一条重要公告内容",
  actionUrl = "#",
  actionText = "点击查看",
  closeText = "稍后查看",
  closeUrl = "#", // 默认链接
  autoShowInterval = 10, // 默认10秒
  isOpen = false
} = Astro.props;
---

<div class={`modal-overlay ${isOpen ? 'active' : ''}`} id="announcement-popup" data-initial-open={isOpen.toString()}>
  <div class="modal-content">
    <button class="close-button" aria-label="关闭公告" id="close-icon-button">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    
    <div class="modal-body">
      <h2 class="modal-title">{title}</h2>
      <div class="modal-description" set:html={content}></div>
      <div class="announcement-actions">
        <a href={actionUrl} class="action-button view-button" id="view-announcement">{actionText}</a>
        <a href={closeUrl} target="_blank" class="action-button close-button-text" id="close-text-button">{closeText}</a>
      </div>
    </div>
  </div>
</div>

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
    backdrop-filter: blur(2px);
    padding: 1rem;
    box-sizing: border-box;
  }

  .modal-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .modal-content {
    background: white;
    padding: 1.5rem;
    border-radius: 16px;
    position: relative;
    max-width: 700px;
    width: 100%;
    max-height: calc(100vh - 2rem);
    overflow-y: auto;
    transform: scale(0.9) translateY(-20px);
    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
    opacity: 0;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    will-change: transform;
  }

  .modal-overlay.active .modal-content {
    transform: scale(1) translateY(0);
    opacity: 1;
  }

  .modal-content:hover {
    transform: scale(1) translateY(-2px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
  }

  .close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(0, 0, 0, 0.05);
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    color: #666;
    transition: all 0.2s ease;
    z-index: 1;
  }

  .close-button:hover {
    color: #333;
    background: rgba(0, 0, 0, 0.1);
    transform: rotate(90deg);
  }

  .modal-body {
    text-align: center;
  }

  .modal-title {
    font-size: 1.25rem;
    margin-bottom: 0.8rem;
    color: #333;
    font-weight: 600;
  }

  .modal-description {
    color: #333;
    margin-bottom: 1.2rem;
    font-size: 0.875rem;
    line-height: 1.5;
    text-align: left;
  }
  
  .modal-description h2 {
    font-size: 1.1rem;
    margin: 0.8rem 0 0.4rem;
    color: #1f2937;
    text-align: center;
    font-weight: 600;
  }
  
  .modal-description h3 {
    font-size: 0.95rem;
    margin: 0.8rem 0 0.4rem;
    color: #1f2937;
    text-align: left;
    font-weight: 600;
  }
  
  .modal-description ul {
    padding-left: 1.2rem;
    margin: 0.4rem 0;
  }
  
  .modal-description li {
    margin-bottom: 0.2rem;
    font-size: 0.875rem;
  }
  
  .modal-description div {
    margin-bottom: 0.3rem;
    font-size: 0.875rem;
  }
  
  .modal-description strong,
  .modal-description b {
    color: #1f2937;
    font-weight: 600;
  }
  
  .modal-description .highlight {
    color: #ef4444;
    font-weight: 600;
  }
  
  .modal-description .divider {
    border-bottom: 1px dashed #d1d5db;
    margin: 0.6rem 0;
  }

  .announcement-actions {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 0.8rem;
    flex-wrap: wrap;
  }

  .action-button {
    padding: 0.6rem 1.2rem;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    min-width: 100px;
    text-align: center;
  }

  .view-button {
    background-color: #3b82f6;
    color: white;
    border: none;
  }

  .view-button:hover {
    background-color: #2563eb;
  }
  
  .close-button-text {
    background-color: #f3f4f6;
    color: #4b5563;
    border: none;
  }
  
  .close-button-text:hover {
    background-color: #e5e7eb;
    color: #1f2937;
  }

  @media (max-width: 768px) {
    .modal-overlay {
      padding: 0.5rem;
    }
    
    .modal-content {
      padding: 1.2rem;
      max-width: none;
      width: 100%;
      max-height: calc(100vh - 1rem);
    }

    .modal-title {
      font-size: 1.1rem;
      margin-bottom: 0.6rem;
    }

    .modal-description {
      font-size: 0.8rem;
      margin-bottom: 1rem;
    }
    
    .modal-description h2 {
      font-size: 1rem;
      margin: 0.6rem 0 0.3rem;
    }
    
    .modal-description h3 {
      font-size: 0.875rem;
      margin: 0.6rem 0 0.3rem;
    }
    
    .modal-description div {
      font-size: 0.8rem;
      margin-bottom: 0.25rem;
    }
    
    .action-button {
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
      min-width: 90px;
    }
    
    .announcement-actions {
      gap: 6px;
      margin-top: 0.6rem;
    }
  }

  @media (max-width: 480px) {
    .modal-overlay {
      padding: 0.25rem;
    }
    
    .modal-content {
      padding: 1rem;
      width: 100%;
      max-height: calc(100vh - 0.5rem);
      border-radius: 12px;
    }

    .modal-title {
      font-size: 1rem;
      margin-bottom: 0.5rem;
    }

    .modal-description {
      font-size: 0.75rem;
      margin-bottom: 0.8rem;
    }
    
    .modal-description h2 {
      font-size: 0.9rem;
      margin: 0.5rem 0 0.25rem;
    }
    
    .modal-description h3 {
      font-size: 0.8rem;
      margin: 0.5rem 0 0.25rem;
    }
    
    .modal-description div {
      font-size: 0.75rem;
      margin-bottom: 0.2rem;
      line-height: 1.4;
    }
    
    .action-button {
      padding: 0.45rem 0.8rem;
      font-size: 0.75rem;
      min-width: 80px;
    }
    
    .announcement-actions {
      flex-direction: column;
      gap: 4px;
      margin-top: 0.5rem;
    }
    
    .close-button {
      top: 0.5rem;
      right: 0.5rem;
      padding: 0.4rem;
    }
    
    .close-button svg {
      width: 18px;
      height: 18px;
    }
  }
</style>

<script define:vars={{ closeUrl, autoShowInterval }}>
  // 获取传递的参数
  const isInitiallyOpen = false; // 默认不显示
  const initialDelay = 10; // 首次显示延迟（秒）
  
  // 公告弹窗状态管理
  let announcementTimer;
  let lastClosed = 0;
  
  // 打开公告弹窗函数
  function openAnnouncement() {
    console.log("尝试打开公告弹窗");
    const popup = document.getElementById('announcement-popup');
    if (popup) {
      console.log("找到公告弹窗元素，添加active类");
      popup.classList.add('active');
      
      // 检查是否有其他弹窗已经打开
      const qrModal = document.getElementById('qr-modal');
      const isQRModalOpen = qrModal && qrModal.classList.contains('active');
      
      // 只有在没有其他弹窗打开时才修改body样式
      if (!isQRModalOpen) {
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.width = '100%';
      }
      
      // 计算模态框居中位置
        const modalContent = popup.querySelector('.modal-content');
        if (modalContent) {
          // 移除之前的定位样式，让CSS的居中布局生效
          modalContent.style.left = '';
          modalContent.style.top = '';
        }
      
      // 更新最后显示时间并广播给其他页面
      updateLastShownTime();
    } else {
      console.log("未找到公告弹窗元素");
    }
  }

  // 关闭公告弹窗函数
  function closeAnnouncement() {
    console.log("尝试关闭公告弹窗");
    const popup = document.getElementById('announcement-popup');
    if (popup) {
      popup.classList.remove('active');
      // 记录关闭时间
      lastClosed = Date.now();
      // 重新开始计时
      startAnnouncementTimer();
      
      // 检查是否有其他弹窗仍然打开
      const qrModal = document.getElementById('qr-modal');
      const isQRModalOpen = qrModal && qrModal.classList.contains('active');
      
      // 只有在没有其他弹窗打开时才恢复body样式
      if (!isQRModalOpen) {
        document.body.style.overflow = 'auto';
        document.body.style.position = 'static';
      }
    }
  }

  // 开始计时器
  function startAnnouncementTimer(isFirstTime = false) {
    // 清除现有计时器
    if (announcementTimer) {
      clearTimeout(announcementTimer);
    }
    
    // 设置新计时器，首次使用initialDelay，之后使用autoShowInterval
    const interval = isFirstTime ? initialDelay : autoShowInterval;
    console.log(`设置计时器，${interval}秒后显示公告`);
    
    announcementTimer = setTimeout(() => {
      openAnnouncement();
    }, interval * 1000);
  }

  // 绑定事件
  function bindEvents() {
    console.log("绑定事件");
    
    // 确保所有元素都存在
    const closeIconButton = document.getElementById('close-icon-button');
    const closeTextButton = document.getElementById('close-text-button');
    const modal = document.getElementById('announcement-popup');
    
    if (!closeIconButton || !closeTextButton || !modal) {
      console.log("部分元素不存在，延迟绑定事件");
      setTimeout(() => bindEvents(), 100);
      return;
    }
    
    // 绑定关闭按钮事件 - 右上角的X按钮
    closeIconButton.addEventListener('click', (e) => {
      e.preventDefault();
      console.log("右上角关闭按钮点击");
      closeAnnouncement();
    });
    console.log("已绑定右上角关闭按钮事件");
    
    // 绑定关闭文本按钮事件 - 底部的"稍后查看"按钮
    closeTextButton.addEventListener('click', (e) => {
      console.log("底部关闭按钮点击");
      e.preventDefault(); // 阻止默认的链接跳转
      
      // 先关闭弹窗
      closeAnnouncement();
      
      // 如果有有效链接，在新窗口打开
      const href = closeTextButton.getAttribute('href');
      if (href && href !== '#') {
        console.log("打开链接:", href);
        window.open(href, '_blank');
      }
    });
    console.log("已绑定底部关闭按钮事件");
    
    // 点击背景关闭模态框
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        console.log("背景点击关闭");
        closeAnnouncement();
      }
    });
    console.log("已绑定背景点击事件");
    
    // 监听自定义事件
    document.addEventListener('openAnnouncement', () => {
      console.log("接收到openAnnouncement事件");
      openAnnouncement();
    });
    
    document.addEventListener('closeAnnouncement', () => {
      console.log("接收到closeAnnouncement事件");
      closeAnnouncement();
    });
    
    // 按ESC键关闭模态框
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        console.log("ESC键关闭");
        closeAnnouncement();
      }
    });
    
    console.log("所有事件绑定完成");
  }

  // 初始化函数
  function initAnnouncement() {
    console.log("初始化公告弹窗");
    
    // 确保DOM元素存在
    const popup = document.getElementById('announcement-popup');
    if (!popup) {
      console.log("公告弹窗元素不存在，延迟初始化");
      setTimeout(() => initAnnouncement(), 100);
      return;
    }
    
    bindEvents();
    
    // 检查localStorage中的上次显示时间
    const lastShownTime = parseInt(localStorage.getItem('announcement_last_shown') || '0');
    const now = Date.now();
    const timeSinceLastShown = now - lastShownTime;
    
    // 如果设置为初始显示，则立即显示
    if (popup.getAttribute('data-initial-open') === 'true') {
      console.log("设置为初始显示，立即显示公告");
      setTimeout(() => {
        openAnnouncement();
      }, 500);
    } else if (timeSinceLastShown > autoShowInterval * 1000 || lastShownTime === 0) {
      // 如果距离上次显示超过间隔时间，或者是首次访问，则5秒后显示
      console.log("满足显示条件，5秒后显示公告");
      setTimeout(() => {
        openAnnouncement();
      }, 5000);
    } else {
      // 否则按剩余时间计算何时显示
      const remainingTime = autoShowInterval * 1000 - timeSinceLastShown;
      console.log(`距离下次显示还有 ${Math.ceil(remainingTime / 1000)} 秒`);
      setTimeout(() => {
        openAnnouncement();
      }, remainingTime);
    }
  }

  // 页面加载完成后初始化 - 使用Astro的页面加载事件
  document.addEventListener('astro:page-load', () => {
    console.log("Astro页面加载完成，初始化公告弹窗");
    initAnnouncement();
  });
  
  // 兼容性处理 - 如果不是Astro导航，使用DOMContentLoaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      console.log("DOM加载完成，初始化公告弹窗");
      initAnnouncement();
    });
  } else {
    // 如果DOM已经加载完成，直接初始化
    console.log("DOM已加载，直接初始化公告弹窗");
    initAnnouncement();
  }

  // 页面可见性变化时重新计时
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      // 如果页面变为可见且距离上次关闭已超过间隔时间，则显示公告
      const now = Date.now();
      if (now - lastClosed > autoShowInterval * 1000) {
        openAnnouncement();
      } else {
        // 否则重新开始计时
        startAnnouncementTimer(false);
      }
    }
  });
  
  // 全局公告显示控制 - 在所有页面共享同一个计时器
  window.addEventListener('storage', (event) => {
    if (event.key === 'announcement_last_shown') {
      const lastShownTime = parseInt(event.newValue || '0');
      const now = Date.now();
      
      // 如果距离上次显示已经超过间隔时间，则显示公告
      if (now - lastShownTime > autoShowInterval * 1000) {
        openAnnouncement();
        // 更新最后显示时间
        localStorage.setItem('announcement_last_shown', now.toString());
      }
    }
  });
  
  // 当公告显示时，更新最后显示时间并广播给其他页面
  function updateLastShownTime() {
    const now = Date.now();
    localStorage.setItem('announcement_last_shown', now.toString());
  }
</script>